import requests
import pandas as pd
import plotly.express as px
import streamlit as st
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import time

# RIPE Atlas API base URL
RIPE_ATLAS_API_URL = "https://atlas.ripe.net/api/v2/measurements/"
PINGDOM_API_URL = "https://api.pingdom.com/api/3.1/summary.average"

# Replace with your own API key (or use other methods to authenticate)
RIPE_API_KEY = 'your_ripe_api_key_here'
PINGDOM_API_KEY = 'your_pingdom_api_key_here'
SENDER_EMAIL = 'your_email@example.com'
SENDER_PASSWORD = 'your_email_password'

# Function to send email alerts
def send_email_alert(subject, body, recipient_email):
    msg = MIMEMultipart()
    msg['From'] = SENDER_EMAIL
    msg['To'] = recipient_email
    msg['Subject'] = subject
    
    # Body of the email
    msg.attach(MIMEText(body, 'plain'))
    
    try:
        server = smtplib.SMTP('smtp.gmail.com', 587)  # Gmail SMTP server
        server.starttls()
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        text = msg.as_string()
        server.sendmail(SENDER_EMAIL, recipient_email, text)
        server.quit()
        print("Email sent successfully.")
    except Exception as e:
        print(f"Error sending email: {e}")

# Function to fetch latency data from RIPE Atlas API
def fetch_ripe_latency_data(measurement_id):
    url = f"{RIPE_ATLAS_API_URL}{measurement_id}/results/"
    headers = {'Authorization': f"Bearer {RIPE_API_KEY}"}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        return data
    else:
        print("Failed to fetch data from RIPE Atlas API")
        return None

# Function to fetch latency data from Pingdom API
def fetch_pingdom_latency_data(domain):
    url = f"{PINGDOM_API_URL}?hostname={domain}&resolution=300&from={int(time.time()) - 3600}&to={int(time.time())}"
    headers = {'Authorization': f"Bearer {PINGDOM_API_KEY}"}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        return data
    else:
        print("Failed to fetch data from Pingdom API")
        return None

# Process latency data: Calculate statistics and identify anomalies
def process_latency_data(latency_data):
    df = pd.DataFrame(latency_data)
    
    # Convert timestamps and latencies to appropriate formats
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df['latency'] = pd.to_numeric(df['latency'], errors='coerce')  # Ensure latency is numeric
    
    # Drop rows where latency is NaN (could happen due to non-numeric values)
    df = df.dropna(subset=['latency'])
    
    # Calculate basic statistics
    avg_latency = df['latency'].mean()
    max_latency = df['latency'].max()
    std_latency = df['latency'].std()

    # Detect anomalies (latency spikes or outliers)
    threshold = avg_latency + 2 * std_latency  # Example threshold for anomaly detection
    anomalies = df[df['latency'] > threshold]
    
    return df, avg_latency, max_latency, std_latency, anomalies

# Function to visualize latency data using Plotly
def plot_latency_data(df):
    fig = px.line(df, x='timestamp', y='latency', title='Real-Time Latency Monitoring')
    fig.update_xaxes(title='Time')
    fig.update_yaxes(title='Latency (ms)')
    return fig

# Streamlit dashboard function
def create_dashboard():
    st.title("Real-Time Latency Monitoring System")
    
    # Region and time range filters
    region = st.selectbox("Select Region", ["Global", "Europe", "North America", "Asia"])
    time_range = st.slider("Select Time Range (minutes)", 10, 120, 30)
    
    # Input for RIPE Atlas or Pingdom measurement data
    measurement_source = st.radio("Choose Data Source", ["RIPE Atlas", "Pingdom"])
    
    if measurement_source == "RIPE Atlas":
        measurement_id = st.text_input("Enter RIPE Atlas Measurement ID", "123456")
        if measurement_id:
            # Fetch the data from RIPE Atlas API
            latency_data = fetch_ripe_latency_data(measurement_id)
            if latency_data:
                # Process and analyze the latency data
                df, avg_latency, max_latency, std_latency, anomalies = process_latency_data(latency_data)
                
                # Display basic statistics
                st.subheader("Basic Latency Statistics")
                st.write(f"Average Latency: {avg_latency:.2f} ms")
                st.write(f"Max Latency: {max_latency:.2f} ms")
                st.write(f"Latency Standard Deviation: {std_latency:.2f} ms")
                
                # Display anomalies
                st.subheader("Anomalous Latencies")
                if not anomalies.empty:
                    st.write(anomalies)
                    # Send email alert if anomalies detected
                    send_email_alert("Latency Anomaly Detected", f"Anomalies detected in latency data for measurement ID {measurement_id}", "recipient_email@example.com")
                else:
                    st.write("No anomalies detected.")
                
                # Visualize the latency data
                st.subheader("Latency Over Time")
                latency_fig = plot_latency_data(df)
                st.plotly_chart(latency_fig)

    elif measurement_source == "Pingdom":
        domain = st.text_input("Enter Domain for Pingdom Latency", "example.com")
        if domain:
            # Fetch the data from Pingdom API
            latency_data = fetch_pingdom_latency_data(domain)
            if latency_data:
                # Process and analyze the latency data
                df, avg_latency, max_latency, std_latency, anomalies = process_latency_data(latency_data)
                
                # Display basic statistics
                st.subheader("Basic Latency Statistics")
                st.write(f"Average Latency: {avg_latency:.2f} ms")
                st.write(f"Max Latency: {max_latency:.2f} ms")
                st.write(f"Latency Standard Deviation: {std_latency:.2f} ms")
                
                # Display anomalies
                st.subheader("Anomalous Latencies")
                if not anomalies.empty:
                    st.write(anomalies)
                    # Send email alert if anomalies detected
                    send_email_alert("Latency Anomaly Detected", f"Anomalies detected in latency data for domain {domain}", "recipient_email@example.com")
                else:
                    st.write("No anomalies detected.")
                
                # Visualize the latency data
                st.subheader("Latency Over Time")
                latency_fig = plot_latency_data(df)
                st.plotly_chart(latency_fig)

# Run the Streamlit dashboard
if __name__ == '__main__':
    create_dashboard()
